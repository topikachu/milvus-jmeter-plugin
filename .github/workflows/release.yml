name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10.7
        options: --privileged
        ports:
          - 2375:2375
        env:
          DOCKER_TLS_CERTDIR: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'zulu' # You can also use 'adopt' or 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Git user
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Read release properties
        id: read_properties
        run: |
          TAG_NAME=$(grep '^scm.tag=' release.properties | cut -d'=' -f2)
          RELEASE_VERSION=$(grep '^releaseVersion=' release.properties | cut -d'=' -f2)
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release $RELEASE_VERSION" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      - name: Run Maven Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_HOST: tcp://localhost:2375
        run: |
          mvn -B release:prepare release:perform -Darguments="-Dmaven.deploy.skip=true"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: plugin/target/milvus-jmeter-plugin-${{ env.RELEASE_VERSION }}.jar
          asset_name: milvus-jmeter-plugin-${{ env.RELEASE_VERSION }}.jar
          asset_content_type: application/java-archive

      - name: Upload ZIP to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: plugin/target/milvus-jmeter-plugin-${{ env.RELEASE_VERSION }}-all.zip
          asset_name: milvus-jmeter-plugin-${{ env.RELEASE_VERSION }}-all.zip
          asset_content_type: application/zip